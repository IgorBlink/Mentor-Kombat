import { useEffect, useRef, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import GameHUD from '../UI/GameHUD'

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∞—Ä–µ–Ω—ã - —Ç–æ–ª—å–∫–æ ID –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
const ARENAS = [0, 1, 2]

export default function GameCanvas({ gameState }) {
  const navigate = useNavigate()
  const gameContainerRef = useRef(null)
  const [isGameLoaded, setIsGameLoaded] = useState(false)
  const [loadingError, setLoadingError] = useState(null)
  const gameInitRef = useRef(false)
  const [currentArena, setCurrentArena] = useState(null)
  const [players, setPlayers] = useState({
    player1: { name: 'Bakhredin', life: 100 },
    player2: { name: 'Diana', life: 100 }
  })

  // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∞—Ä–µ–Ω—ã
  const getRandomArena = () => {
    const randomIndex = Math.floor(Math.random() * ARENAS.length)
    const arenaId = ARENAS[randomIndex]
    console.log(`üé≤ Random arena selected: ${arenaId}`)
    return arenaId
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –∏–≥—Ä–æ–∫–æ–≤
  const updatePlayerHealth = (fighterName, health) => {
    console.log(`ü©∫ Health update: ${fighterName} -> ${health}%`)
    
    setPlayers(prev => {
      if (fighterName.toLowerCase().includes('subzero') || fighterName.toLowerCase().includes('bakhredin')) {
        return {
          ...prev,
          player1: { ...prev.player1, life: Math.max(0, Math.min(100, health)) }
        }
      } else if (fighterName.toLowerCase().includes('kano') || fighterName.toLowerCase().includes('diana')) {
        return {
          ...prev,
          player2: { ...prev.player2, life: Math.max(0, Math.min(100, health)) }
        }
      }
      return prev
    })
  }

  // –í—ã–±–∏—Ä–∞–µ–º –∞—Ä–µ–Ω—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    if (currentArena === null) {
      const newArena = getRandomArena()
      setCurrentArena(newArena)
    }
  }, [currentArena])

  useEffect(() => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (gameInitRef.current || currentArena === null) {
      console.log('Game already initialized or arena not selected, skipping')
      return
    }

    gameInitRef.current = true
    console.log(`üéÆ Starting fresh game initialization with arena: ${currentArena}`)
    
    const initGame = async () => {
      try {
        // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        console.log('üßπ Pre-init cleanup')
        if (gameContainerRef.current) {
          gameContainerRef.current.innerHTML = ''
        }
        
        // –ï—Å–ª–∏ mk —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª–Ω–æ—Å—Ç—å—é –µ–≥–æ –æ—á–∏—â–∞–µ–º
        if (window.mk) {
          console.log('üóëÔ∏è Clearing existing mk.js instance')
          if (window.mk.game) {
            try {
              if (window.mk.game.stop) window.mk.game.stop()
            } catch (e) {
              console.warn('Could not stop existing game:', e)
            }
          }
          delete window.mk
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (typeof window.mk === 'undefined') {
          console.log('üì¶ Loading mk.js scripts...')
          
          await loadScript('/mk.js/game/src/movement.js')
          await loadScript('/mk.js/game/src/mk.js')

          // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ mk –æ–±—ä–µ–∫—Ç–∞
          let attempts = 0
          while (typeof window.mk === 'undefined' && attempts < 100) {
            attempts++
            await new Promise(resolve => setTimeout(resolve, 50))
          }

          if (typeof window.mk === 'undefined') {
            throw new Error('mk.js failed to load after 5 seconds')
          }
        }

        console.log('‚úÖ mk.js is ready')
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        if (window.mk && window.mk.config) {
          window.mk.config.IMAGES = '/mk.js/game/images/'
          console.log('üñºÔ∏è Image paths configured:', window.mk.config.IMAGES)
        }
        
        // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
        await new Promise(resolve => setTimeout(resolve, 100))
        
        if (!gameContainerRef.current) {
          throw new Error('Game container not available')
        }

        console.log('üöÄ Starting mk game...')
        
        // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        const gameWidth = 1000
        const gameHeight = 500
        
        console.log(`üéØ Game size: ${gameWidth}x${gameHeight}`)
        console.log(`üèüÔ∏è Using arena: ${currentArena}`)
        
        // –ü—Ä–æ—Å—Ç—ã–µ –æ–ø—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—Ä–µ–Ω–æ–π
        const options = {
          arena: {
            container: gameContainerRef.current,
            arena: currentArena, // –ü—Ä—è–º–æ –ø–µ—Ä–µ–¥–∞–µ–º ID –∞—Ä–µ–Ω—ã
            width: gameWidth,
            height: gameHeight
          },
          fighters: [
            { name: 'Subzero' },
            { name: 'Kano' }
          ],
          gameType: 'basic',
          callbacks: {
            // Callback –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω
            attack: function(attacker, victim, damage) {
              console.log(`‚öîÔ∏è Attack: ${attacker.getName()} -> ${victim.getName()}, damage: ${damage}`)
              
              const victimLife = victim.getLife()
              console.log(`üíö ${victim.getName()} health: ${victimLife}`)
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤ UI
              updatePlayerHealth(victim.getName(), victimLife)
            },
            
            // Callback –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ —É–º–∏—Ä–∞–µ—Ç
            death: function(fighter) {
              console.log(`üíÄ ${fighter.getName()} died!`)
              updatePlayerHealth(fighter.getName(), 0)
            },
            
            // Callback –∫–æ–≥–¥–∞ –±–æ–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
            victory: function(winner) {
              console.log(`üèÜ Victory: ${winner.getName()} wins!`)
            }
          }
        }

        console.log('üéÆ Game options:', options)

        const gamePromise = window.mk.start(options)
        console.log('üìã Game promise created:', typeof gamePromise)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ready callback
        if (gamePromise && gamePromise.ready) {
          console.log('‚úÖ Setting up ready callback')
          gamePromise.ready(() => {
            console.log('üéâ Game ready!')
            setIsGameLoaded(true)
            
            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–æ–≤
            const healthCheckInterval = setInterval(() => {
              if (window.mk && window.mk.game && window.mk.game.fighters) {
                window.mk.game.fighters.forEach(fighter => {
                  if (fighter && fighter.getLife && fighter.getName) {
                    const currentLife = fighter.getLife()
                    updatePlayerHealth(fighter.getName(), currentLife)
                  }
                })
              }
            }, 100) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100ms
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            window.mkHealthInterval = healthCheckInterval
          })
        } else {
          console.log('‚ùå No ready method on game promise')
        }

        // –§–æ–ª–ª–±—ç–∫ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          console.log('‚è∞ Force showing game after 2 seconds')
          setIsGameLoaded(true)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
          if (gameContainerRef.current) {
            const children = gameContainerRef.current.children.length
            console.log(`Container has ${children} children`)
            if (children === 0) {
              console.log('‚ùå Container is still empty - possible mk.js error')
            }
          }
        }, 2000)

      } catch (error) {
        console.error('‚ùå Game initialization error:', error)
        setLoadingError(error.message)
        gameInitRef.current = false
      }
    }

    initGame()

    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      console.log('üßπ Component cleanup')
      
      // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
      if (window.mkHealthInterval) {
        clearInterval(window.mkHealthInterval)
        window.mkHealthInterval = null
      }
      
      // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ mk.js —Å–æ—Å—Ç–æ—è–Ω–∏—è
      cleanupMkGame()
      
      gameInitRef.current = false
    }
  }, [currentArena]) // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç currentArena

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞
  const loadScript = (src) => {
    return new Promise((resolve, reject) => {
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const existingScript = document.querySelector(`script[src*="${src.split('/').pop()}"]`)
      if (existingScript) {
        console.log('üóëÔ∏è Removing existing script:', src)
        existingScript.remove()
      }
      
      console.log('üì• Loading script:', src)
      const script = document.createElement('script')
      script.src = src + '?t=' + Date.now() // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      script.onload = () => {
        console.log('‚úÖ Script loaded:', src)
        resolve()
      }
      script.onerror = () => reject(new Error(`Failed to load ${src}`))
      document.head.appendChild(script)
    })
  }

  const handlePause = () => {
    console.log('Game paused')
  }

  const handleRestart = () => {
    console.log('üîÑ Restarting game...')
    
    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    if (window.mkHealthInterval) {
      clearInterval(window.mkHealthInterval)
      window.mkHealthInterval = null
    }
    
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º mk.js —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    cleanupMkGame()
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    setIsGameLoaded(false)
    setLoadingError(null)
    gameInitRef.current = false
    setCurrentArena(null) // –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∞—Ä–µ–Ω—É
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
    setPlayers({
      player1: { name: 'Bakhredin', life: 100 },
      player2: { name: 'Diana', life: 100 }
    })
    
    console.log('üöÄ Restarting game after cleanup')
  }

  const handleMainMenu = () => {
    console.log('üè† Returning to main menu')
    
    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    if (window.mkHealthInterval) {
      clearInterval(window.mkHealthInterval)
      window.mkHealthInterval = null
    }
    
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º mk.js —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    cleanupMkGame()
    
    navigate('/')
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ mk.js
  const cleanupMkGame = () => {
    console.log('üßπ Cleaning up mk.js state')
    
    try {
      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      if (gameContainerRef.current) {
        gameContainerRef.current.innerHTML = ''
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (window.mk && window.mk.game) {
        console.log('‚èπÔ∏è Stopping existing mk.js game')
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É
        if (window.mk.game.stop) {
          window.mk.game.stop()
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—É
        window.mk.game = null
      }
      
      // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º mk –æ–±—ä–µ–∫—Ç –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
      if (window.mk) {
        console.log('üóëÔ∏è Resetting mk.js object')
        delete window.mk
      }
      
      // –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã mk.js –∏–∑ DOM
      const scripts = document.querySelectorAll('script[src*="mk.js"], script[src*="movement.js"]')
      scripts.forEach(script => {
        console.log('üóëÔ∏è Removing script:', script.src)
        script.remove()
      })
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Error during cleanup:', error)
    }
  }

  const handleGameEnd = (result) => {
    console.log(`üèÜ Game ended with result: ${result}`)
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –ø–æ–∫–∞–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (window.mk && window.mk.game) {
      // mk.js –º–æ–∂–µ—Ç –Ω–µ –∏–º–µ—Ç—å –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –Ω–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å
      console.log('üõë Attempting to pause/stop mk.js game')
    }
  }

  const getArenaName = (arenaId) => {
    switch(arenaId) {
      case 0: return 'Throne Room'
      case 1: return 'Demo Day Arena'
      case 2: return 'Podcast Arena'
      default: return 'Unknown Arena'
    }
  }

  if (loadingError) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-center bg-red-900/50 p-8 rounded-lg border border-red-500 max-w-md">
          <div className="text-6xl mb-4">‚ö†Ô∏è</div>
          <h2 className="text-2xl font-bold text-red-400 mb-4">Game Error</h2>
          <p className="text-gray-300 mb-6">{loadingError}</p>
          <div className="space-y-2">
            <button onClick={handleMainMenu} className="btn-primary w-full">
              Main Menu
            </button>
            <button onClick={handleRestart} className="btn-secondary w-full">
              Reload
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-900 relative">
      <GameHUD
        players={players}
        onPause={handlePause}
        onRestart={handleRestart}
        onMainMenu={handleMainMenu}
        onGameEnd={handleGameEnd}
      />

      <div className="flex justify-center items-center p-4 pt-20">
        <div className="relative">
          {!isGameLoaded && (
            <div className="absolute inset-0 flex items-center justify-center bg-gray-900 bg-opacity-90 z-10 rounded-lg">
              <div className="text-center">
                <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-yellow-400 mx-auto"></div>
                <p className="text-yellow-400 text-xl mt-4">Loading Fight...</p>
                <p className="text-gray-400 mt-2">Bakhredin vs Diana</p>
                {currentArena !== null && (
                  <p className="text-gray-500 mt-1 text-sm">
                    Arena: {getArenaName(currentArena)} ({currentArena})
                  </p>
                )}
              </div>
            </div>
          )}
          
          <div
            ref={gameContainerRef}
            className="border-4 border-yellow-400 rounded-lg overflow-hidden bg-black"
            style={{ 
              width: '1000px',
              height: '500px'
            }}
          />
        </div>
      </div>

      <div className="absolute bottom-4 left-4 bg-gray-600 bg-opacity-90 p-4 rounded-lg text-sm text-gray-300">
        <h3 className="text-yellow-400 font-bold mb-2">Controls:</h3>
        <p>P1: A/D move, W jump, S crouch, J/K attack</p>
        <p>P2: ‚Üê/‚Üí move, ‚Üë jump, ‚Üì crouch, 1/2 attack</p>
      </div>

      <div className="absolute bottom-4 right-4 bg-gray-600 bg-opacity-90 p-4 rounded-lg text-sm text-gray-300">
        <h3 className="text-yellow-400 font-bold mb-2">Debug Info:</h3>
        <p>Game Loaded: {isGameLoaded ? '‚úÖ' : '‚è≥'}</p>
        <p>Initialized: {gameInitRef.current ? '‚úÖ' : '‚è≥'}</p>
        <p>Container children: {gameContainerRef.current?.children?.length || 0}</p>
        <p>mk available: {typeof window.mk !== 'undefined' ? '‚úÖ' : '‚ùå'}</p>
        <p>P1 Health: {players.player1.life}%</p>
        <p>P2 Health: {players.player2.life}%</p>
        <p>Current Arena: {currentArena !== null ? `${getArenaName(currentArena)} (${currentArena})` : 'None'}</p>
      </div>
    </div>
  )
} 